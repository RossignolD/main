# From Functions to Sets

## A Brief Disclaimer

We now know that functions map elements of a domain to elements of a co-domain.
But what exactly are the domain and the co-domain?
Informally, we have referred to them as collections, but the accurate mathematical term is *sets*.
Sets are the foundation of modern mathematics in terms of which everything is defined, including functions.
However, formalizing sets is not a trivial affair, which is why beginner-friendly texts usually just rely on the readers' intuition for sets.
But intuitions can be misleading, in particular for sets.
In general, the intuitions for functions are clearer and are less likely to lead readers astray.
For this reason we will define sets in terms of functions, rather than the other way round.

## Sets as Functions

Suppose we want to talk about the even natural numbers, or more precisely, the *set of even natural numbers*.
What kind of mathematical object is that?
Intuitively we know that it contains every natural number that can be divided by $2$ without any remainder: $0$, $2$, $4$, and so on.
But we also know that it does not contain any number that is not natural or not even.
This rules out $1$, $-2$, $.26$, $\pi$, and much more.
Suppose, then, that there is some function $\mathbb{N}_e$ that maps an element to True ($\top$) if it is an even natural number and to False ($\bot$) otherwise.
This function defines the set of even natural numbers.
In standard mathematics, where sets are primitives rather than defined via functions, $\mathbb{N}_e$ would be called the *characteristic function* of the set of even natural numbers.

Here is another example.
Let $f$ be a function such that $\mathit{Fry} \mapsto \top$, $\mathit{Leela} \mapsto \top$, and $\mathit{Bender} \mapsto \top$.
But everything else is mapped to $\bot$, e.g. $\mathit{Homer} \mapsto \bot$ and $\mathit{Bart} \mapsto \bot$.
This function defines the set of main characters of the TV show *Futurama*.

Using the functional $\mapsto$ notation for defining sets is rather cumbersome, and instead a list with curly braces is commonly used.
For instance, the Futurama set is $\{\mathit{Fry}, \mathit{Leela}, \mathit{Bender}\}$.
We can also give it a name with the operator $\is$, e.g. $F \is \{\mathit{Fry}, \mathit{Leela}, \mathit{Bender}\}$.
Note that the order of elements does not matter, so $\{\mathit{Fry}, \mathit{Leela}, \mathit{Bender}\} = \{\mathit{Leela}, \mathit{Bender}, \mathit{Fry}\}$.
And listing elements more than once does not change the set: $\{\mathit{Fry}, \mathit{Leela}, \mathit{Bender}\} = \{\mathit{Fry}, \mathit{Leela}, \mathit{Leela}, \mathit{Bender}, \mathit{Bender}, \mathit{Bender}\}$

```python
# function to compare two sets
def set_comparison(A, B):
    if A == B:
        print("These two sets are identical")
    else:
        print("These two sets are not identical")

# our example sets
set1 = set(["Fry", "Leela", "Bender"])
set2 = set(["Leela", "Bender", "Fry"])
set3 = set(["Fry", "Leela", "Leela", "Bender", "Bender", "Bender"])

# and the comparisons
set_comparison(set1, set2)
set_comparison(set1, set3)
set_comparison(set2, set3)
```

Both properties make perfect sense from the functional perspective.
The set notation is just a shorthand for specifying which elements are mapped to $\top$ --- the order in which this is specified is immaterial for the function.
And saying multiple times that a given element is mapped to $\top$ does not change the defined function either.

## Set Membership

The main reason to use sets is because they provide a convenient way of grouping elements together.
For example, we could define the set $V$ of English verbs (although listing all verbs would take a lot of typing even with the more succinct set notation) and then say that every word that belongs to this set has at least two inflected present tense forms (*be* and *have* have more than that; *must*, *may*, *might*, *should*, and *will* are modals).
We could express this as "For all $x \in V$, $x$ has at least two inflected present tense forms".
Here the *set membership* symbol $\in$ is used to indicate that $x$ is contained in the set $V$.
We also say that $x$ is a *member* or an *element* of $V$.

In the same fashion, we could also define sets $N$ for nouns, $\mathit{A}$ for adjectives, and $P$ for prepositions. 
And then we can collect them all in a set $S \is \{V, N, A, P, \ldots\}$.
Let's assume for the sake of example that those are all the POSs of English.
Is $S$ then the set of all English words?
No.
Think about what this set does from a functional perspective.
It maps the sets $V$, $N$, $A$, and $P$ to $\top$, and everything else to $\bot$.
The set of all English words, on the other hand, would map English words like *be*, *tree*, *old* and *into* to $\top$ and everything else to $\bot$.
Suppose for a moment that these four words are the only words of English.
Then $V \is \setof{\mathit{be}}$, $N \is \setof{\mathit{tree}}$, $A \is \setof{\mathit{old}}$, and $P \is \setof{\mathit{into}}$.
So $S$ would be $\setof{\setof{\mathit{be}}, \setof{\mathit{tree}}, \setof{\mathit{old}}, \setof{\mathit{into}}}$.
This is **not** the same set as $\setof{\mathit{be}, \mathit{tree}, \mathit{old}, \mathit{into}}$.
Intuitively that might seem strange to you: if sets are just collections then they both contain the same words, so there's no meaningful difference.
But think about what's going on in terms of functions here: one maps sets of words to $\top$, the other maps words to $\top$.
Those are clearly different arguments, so the functions must have different domains and thus cannot be the same function.

## The Empty Set

Here is another aspect of sets that may be strange from an intuitive perspective but makes more sense once we view sets as functions: the *empty set*, usually written $\emptyset$ instead of $\setof{}$.
The empty set does not contain anything at all.
A collection of absolutely nothing is an odd concept, but mathematically $\emptyset$ is just the function that does not map anything to $\top$.
That such a function should exist is not too surprising.

## Set-Builder Notation

The sets so far have been fairly simple, but there are already a few cases where our current set notation does not quite cut it.
Consider again the set $\mathbb{N}_e$ of all even natural numbers.
With our set notation we could write the set as $\setof{0, 2, 4, \ldots}$, but this is imprecise because there are many other sets that start out this way, for instance the range of the function which maps $0$ to itself and every natural number $x$ to $2^x$.
In fact, any given finite sequence of numbers can be continued in infinitely many distinct ways (that is not a metaphorical claim, one can prove that there is no upper bound on the number of continuations).
So in all but the most trivial cases it is preferable to define sets with a notation that does not rely on listing the elements of the set.

This is accomplished with *set-builder notation*, which is very similar to defining the domain and range of a function.
The general template is $\setof{ \mathit{range} \mid \mathit{domain} }$.
For example, $\mathbb{N}_e \is \setof{ n \mid n \in \mathbb{N}\ \&\ n \mathit{\ is\ even}}$.
This tells us that the domain consists of all $n$ that are natural numbers ($n \in \mathbb{N}$) and even, and each such $n$ is mapped to itself.
But we could also define the set of odd natural numbers as $\setof{ n + 1 \mid n \in \mathbb{N}\ \&\ n \mathit{\ is\ even}}$.
The domain is the same as before, but instead of $n \mapsto n$ we now have $n \mapsto n+1$.
We can use this technique to also provide a simpler definition of the even natural numbers: $\mathbb{N}_e \is \setof{ 2n \mid n \in \mathbb{N} }$.

```python
# set-builder notation even exists in some programming languages like Python
built_set = (2*n for n in [0, 1, 2, 3, 4, 5])
list(built_set)
```

There is no limit on the complexity of set-builder notation.
For example, one could nest multiple set definitions, as in $\setof{ \setof{ i \mid 0 \leq i \leq n } \mid n \in \mathbb{N}}$.
This is a set that contains all initial intervals of the natural number: $\setof{ \setof{0}, \setof{0,1}, \setof{0,1,2}, \setof{0,1,2,3}, \ldots }$.
However, such nested definitions are often cumbersome to read, so try to avoid this.
Quite generally, definitions should not intimidate or dazzle the reader.
A good definition is as complex as necessary and as simple as possible.


## So It's Functions all the Way Down?

Some of you might have already noticed that there is a certain circularity in defining sets via functions.
After all, a function is defined in terms of a domain, a co-domain, and a mapping between them.
Previously we treated domains and co-domains purely informally as collections, but now we have formalized them via sets, which are... well, functions.
So functions are defined in terms of functions.
A function is given by a function defining its domain, a function defining its co-domain, and the mapping between them.
But then the domain function must also be defined via a function defining its domains, a function defining its co-domain, and the mapping between them.
But then the domain function of the domain functions must be defined via such functions, and so on, *ad infinitum*.

This is indeed a troubling state of affairs if one wants all of mathematics to rest on a solid foundation, and it is why mathematicians have opted for taking sets as primitives and defining functions via sets instead.
Make no mistake, though, axiomatizing the notion of set is a very difficult and subtle affair.
The standard axiomatization ZFC (*Zermelo Fraenkel with the Axiom of Choice*) is not without its quirks, either.
For example, it allows for some strange things such as the [Banach-Tarsky paradox](https://en.wikipedia.org/wiki/Banach%E2%80%93Tarski_paradox), which states that a sphere can be decomposed into a finite number of parts which are then reassembled into **two** perfect copies of the original sphere --- a second sphere is magically created out of nothing.
The axiomatization of mathematics is full of fascinating mindbenders of this kind, but that is not something we will dabble in.
We are interested in mathematics as a helpful tool, and thus we allow ourselves a certain amount of imprecision when it comes to the foundations.
That defining sets via functions induces some circularity is not a problem as long as we all have a firm grasp of what functions are and are not.
